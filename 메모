[Spring]
(약40%)Maven project => xml기반의 Spring을 사용하는 프로젝트 (Tomcat 8.5) - LInux기반
(약60%)Spring legacy Project => properties기반으로 Spring을 사용하는 프로젝트 (VMware) - Vmware (Linux : Ubuntu)-> Docker -> Cloud Server
 -legacy project일때 도메인을 설정해야하는데 ((예) kr.co.abc ==> GroupId.artifactId.ProjectId )
(XML종류) -pom.xml | web.xml | config.xml | mapping.xml | database.xml
-@ => class밖, class안 ,인자값
-@Setter,@Getter => DAO,VO(@Getter만 사용)

-@Controller => class밖 메소드명(String boix,int cidx)
-@Autowired => class안 (Controller에서만 사용가능)
-@ModelAttribute => DAO(setter역할 -- 클래스배열(select에서만 사용))
setter => getter (O)
getter => setter (X)
-@RequestParam => 필수값 유/무
-@RequestMapping => required true ->true/false 필수값 유/무
-@PostMapping  
-@GetMapping 




1. 즉시실행 메소드를 사용하지 않음
2. response를 사용할 경우는 script를 무조건 활용
3. void 메소드일 경우 기본으로 view(jsp)발동함 해당 jsp를 사용하기 싫을 경우 PrintWriter를 사용함
4. void 메소드 외 return이 있는 메소드는 jsp와 무조건 같이 사용
  -View페이지가 없을 경우 : void 메소드
  -View페이지가 있을 경우 : return 메소드 (script 사용하지 않음)
5. 일반 자료형 메소드와 ModelAndView 자료형 메소드가 return null에서 서로 다른 결과가 발생함
6. ModelandView는 자료형이 ModelandView만 사용
7. ModelandView외에 return이 있는 메소드 모두 Model이라는 ui를 이용하여 JSTL로 출력
8. JSP형태의 <%%>문법 안에 JSTL ${}를 사용하지 못함

[Spring-legacy] - @Post,@Get이 없음 @Request만 존재하며, 사용하기 위해서는 pom.xml에서
 springfreamework 5.0.x => 이상 사용해야만 정상적으로 매핑을 사용할 수 있음


[Spring]
-Maven,project,Spring Legacy Project
-Legacy : 기본적인 Controller ~ View을 미리 셋팅 단, 그외 DB,DAO,Bean,Properties 직접 추가 구성



{ 라이브러리를 다운받야함
1. Spring-jdbc
2. commons-fileupload
3. mysql
4. lombok
5. dbcp
6. tomcat               }


Database정보를 properties를 이용하여 연결을 하게 됨
/WEB-INF/classes/해당 디렉토리에 DB정보를 생성함
-web.xml => dbconfig.xml을 파일등록 
-dbconfig.xml => bean을 이용하여 jstl형태로 정보를 입력시킴
-서버 재가동


OOP(객체지향) => AOP (관점지향 프로그래밍)
Spring => AOP,Batch,Initializr,PSA,DI,IoC




[JSTL]

  문법 사용

    <!-- jstl 엔진 -->
    <%@ taglib prefix="cr" uri="http://java.sun.com/jsp/jstl/core"%>
    <!-- jstl 각종 함수 -->
    <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
    <!-- jstl Database 관련 사항 -->
    <%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql"%>


<!-- out태그는 out.print와 같은 형태의 출력 태그 입니다. -->
<cr:out value="값출력"/>
<!-- set 태그는 setattribute와 동일한 형태의 태그 값을 받아서 변수로 처리 -->
<cr:set var="a" value="에이핑크"/>${a}
<br><br>
<!-- JSP에 있는 값을 JSTL로 변환시 set을 이용하여 변환 -->
<cr:set var="b" value="<%=user %>"/>${b }<br><br>
<!-- scope :  session을 활성화시 session을 생성 또는 load도 활용할 수 있음 -->
<cr:set var="c" value="JSTL문법" scope="session"/>${c}<br><Br>
세션 초기화 전 데이터 : ${ssdata}
<br><br>
<!--
기존 세션을 삭제 또는 초기화 하고 싶을 경우 다음과 같이 사용가능
세션 초기화시 var속성에 동일한 세션명을 입력하시면 됩니다.
 -->
<cr:set var="ssdata" value="" scope="session"/>
세션 초기화 후 데이터 : ${ssdata}
<br><br>
<!-- scope : request는 value값을 var변수에 값을 저장하는 형태 -->
<cr:set var="zz" value="bdata" scope="request"/>
${zz}<br><br>
<%
String aname="테스트";
%>
<cr:set var="kk" scope="request"><%=aname %></cr:set>
${kk}<br><br>



[Spring-Boot 기반]
Spring Starter Project(2가지로 갈림) => Spring(v3.0이하-JDK16↓),Spring-Boot(v3.0이상 - JDK17↑) -> (VMware) - Vmware (Linux : Ubuntu)

[Type]
Gradle-Groovy : PC개발
Gradle-kotlin : APP개발
maven : 


[Spring과 Servlet의 차이점]
1. Spring 모두 Class <=> Servlet Module : Class, Controller : Servlet
2. GET과 POST에 대한 Parameter값이 다름
    -Spring : HttpRequest,인자값으로 Parameter받기,DAO
    -Servlet : HttpRequest
3. Database 연결구조
    -Spring : Class,XML(bean),properties
    -Servlet : Class,properties
4. MVC 형태
    -Spring : Integet,int,long..(숫자 관련된 메소드 외에 모두 사용가능)
    -Servlet : doPost,doGet,doService(Servlet에서 정해진 메소드만 활용)
5. 라이브러리 형태
    -Spring : pom.xml에서 전체 로드하여 라이브러리 활용
    -Servlet : 직접 프로젝트에 라이브러리를 Load하여 사용해야함
6. View 형태
    -Spring : JSP,JSTL
    -Servlet : JSP


[Spring 셋팅]
1. window -> Preferences -> encoding -> utf-8

2. Install/update -> checkboc 해제

3. Run/debug -> Console -> 10000000

4. Project를 생성하는 형태 Maven Project 생성
    -Create a simle Project 체크하며, use default 체크
        -Groupid,ArtifactId를 동일한 이름으로 생성 packaging war로 변경

5. properties로 이동
    -Java Build Path -> JRE11,Server를 라이브러리에 추가
    ※주의사항 HttpRequest 사용시 빨간색 밑줄 다운받은 서버 삭제 후 새로 다운로드 하여 라이브러리에 추가
    -Java Compiler에서 11버전으로 변경
    -Project Facets -> JAVA11,Dynamic Web Module 3.1로 변경
    -Web Project Settings -> Context root: /로 변경

6. pom.xml에 해당 라이브러리를 모두 추가한다.
        
7. web.xml을 생성 및 해당 web.xml을 수정함(Dispatcher및 언어셋 수정 및 입력)

8. /WEB-INF/webpage.xml을 생성 단, Spring bean configuration File로 XML을 생성해야됨
    -bean,context,mvc 체크 후 최신 버전 형태로 생성을 해야 합니다.

9. Server (restart를 진행) 후 Controller를 생성합니다.(일반 class로 생성)

10. @Controller, @RequestMapping("/생성할.do") 이용하여 웹페이지가 출력되는지 확인

11. lombok 사이트 및 pom.xml해당 라이브러리 추가 및 설치

12. STS3를 종료 후 재실행 class를 생성하여 @Setter,@Getter을 이용하여 메소드가 자동생성이 되는지 확인

[MVC 설계과정]

1. DB table설계

2. DAO 설계

3. Controller 생성

4. view 생성(유/무)

5. Module 생성

6. Controller -> Mdule 호출 후 Data를 return 받음

7. Controller -> View Data를 이관함








[Mybatis]
Spring DB를 DDL을 빠르게 처리해 주는 대표 라이브러리
Spring-Boot => Mybatis
String-boot에서는 JPA를 많이 사용함

java v11 일때 mybatis 최대 버젼 3.2.8정도 

mybatis spring은 java11일때 2.0v 아래 1.3.3정도

Server를 가동하였을때 error가 안뜨면 정상적으로 작동 가능

Mybatis -> config.xml(java-DAO), mapper.xml(DDL)

1.DAO 생성

2. SqlSession을 연결 (dbconfig.xml) : config.xml,mapper.xml연결

3. config.xml => java dao 파일을 coupondao 연결

4. mapper.xml => DDL 태그 <insert>,<update>, <delete>, <select>..

5. Controller에서 SqlSession을 연결

6. DDL 메소드 호출 (DDL 태그명 입력) ex) this.se.insert();

7. mapper에 있는 namespace.id 로 DAO값을 자동으로 전달  ("datadb.coupon_insert",dao)


)

1. [@bean] - properties => @configuration
2. properties / config.xml,mapper.xml
3. dbconfig.xml / config.xml,mapper.xml
4. JPA / @column, @Table, @Entity




-mybatis 사용시 inject 라이브러리 pom.xml에 점프 시키기

-mybatis generater 또한 mybatis랑 동일한 방법으로 다운로드 

-src/main/resource에 META-INF 폴더를 생성

-class를 하나 만들고 @Configuration을 선언한다

-	@Bean(destroyMethod = "close")
	/*
	public BasicDataSource datasource() {
		BasicDataSource bs = new BasicDataSource();
		*/
	public DataSource datasource() {
		org.apache.tomcat.jdbc.pool.DataSource bs= new org.apache.tomcat.jdbc.pool.DataSource();
		bs.setDriverClassName("com.mysql.cj.jdbc.Driver");
		bs.setUrl("jdbc:mysql://localhost:3306/cms");
		bs.setUsername("hana");
		bs.setPassword("hana1234");
		//setInitialSize(?) : DB connection 가능한 개수 ? == 숫자  동시에 사용할수 있는 연결 개수
		bs.setInitialSize(2);
		//setMaxActive(?) : data query문의 최대 수
		bs.setMaxActive(10);
		//비활성화된 DB연결 부분을 유효성 검사
		bs.setTestWhileIdle(true);
		//DB연결 유지 시간
		bs.setMinEvictableIdleTimeMillis(60000*3);
		return bs;
	}

-dbconfig.xml의 
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> 
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/cms"/>
		<property name="username" value="hana"/>
		<property name="password" value="hana1234"/>
	</bean>
선언 후 

	<bean id="sqlfact" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" ></property>
		<property name="configLocation" value="classpath:/META-INF/config.xml"></property>
    <!-- value="classpath:/META-INF/mapper.xml" : classpath 는 src/main/resource의 경로 -->
		<property name="mapperLocations" value="classpath:/META-INF/mapper.xml"></property>
	</bean>


-


프로젝트 생성 전 window -> properties -> encoding -> 언어셋(utf-8) -> install/update -> automatic update -> 
   automatic update 체크박스 해제(버전자동업데이트방지) -> general -> show heap status(on) -> Run/debug -> console -> buffersize(1000000 : 버퍼 사이즈 업그레이드) 

-artifact-
Groupid : kr.co.choongang - 도메인을 거꾸로 써서 무슨 프로젝트인제 한눈에 알아보기 편하게 사용함
artifactid : kr.co.choongang

-parent Project(관리자 페이지)-
Groupid : artifact의 Groupid뒤에 admin을 붙여서 만듬 관리자 페이지를 만들지 않을때는 사용하지 않음

servlet과 달리 Spring은 pom.xml이 생김 (XML)
이 파일을 잘못 건들이면 프로젝트가 날라감(오타가 하나라도 있으면 서버DOWN)

Java Build Path -> library(JDK-11),(sever설정) -> Project Facets -> Dynamic Web Module 서버에 맞는 버전 설정|자바 맞는 버전 설정 바로 옆에 Runtimes들어가서 사용서버 설정
Web Project Settings -> domain(/)로 설정

Project 생성 후 pom.xml이 오류가 뜨는데 maven repository에 Apache Maven WAR Plugin을 다운받아서 
코드 복사후 아래 코드처럼 생성하면 오류가 사라짐

  <build>
  <plugins>
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <version>3.3.2</version>
  </plugin>
  </plugins>
  </build>
이후 web.xml생성 후 source에서  javaee를 http에서 https로 변경 후 저장

maven repository -> tomcat에서 서버 버전과 동일한 버전을 찾아 아래 코드와 같이 복사 후  적용

 <dependencies>
  <!-- Spring+tomcat -->
  <dependency>
    <groupId>org.apache.tomcat</groupId>
    <artifactId>tomcat-catalina</artifactId>
    <version>8.5.61</version>
</dependency>
  </dependencies>

  project에서 properties에 maven을 클릭 후 update를 눌러야만 점프가 알아서 됨


[Spring-MVC]
기본적으로 
v6.1 -> java16
v6.0 -> java14,15
v5.3 -> java11,12,13 

[STS2]

WEB client -> pom.xml -> web.xml -> Dispatcher -> bean.xml -> Java Class 파일(여러개의 웹 파일) -> MVC(model+view+controller) ->JSP,JSTL,JSPX

[STS3]

WEB client -> pom.xml -> web.xml -> Dispatcher -> bean.xml -> @controller 1개(@RequestMapping을 이용하면서 다른 파일을 생성하지 않아도됨,속도↑,관리할 파일↓) 

[STS4]

WEB client -> pom.xml -> web.xml -> Dispatcher -> bean.xml+properties -> @controller 1개(@RequestMapping을 이용하면서 다른 파일을 생성하지 않아도됨,속도↑,관리할 파일↓) 



[Spring Dispatcher]
Spring Dispatcher - > class -> web 출력


[lombok]
Setter,Getter를 @을 이용하여 보다 쉽게 메소드를 생성하는 API
pom.xml에 추가하며, 그리고 lombok 사이트에 접속해서 다운로드 받은 후
cmd에서 설치 후 STS IDE를 재실행
java 경로로 이동후 : java -jar d:\lombok.jar(경로) 실행 후 STS를 찾아서 설치

================================================================================================================================================================================================================
[File(파일)]
[FileUpload(I/O)]
-@Multiconfig -> server업로드 => CDN서버(이미지전용 서버)에서 사용불가

(commons-fileupload를 사용하는 이유)
-commons-fileupload => CND,LocalServer둘다 사용가능하기로 바뀜 

Maven lepository에서 FileUpload를 검색해서 Apache Commons FileUpload를 들어가서 버전에 맞춘다 

{webpage.xml에 작성}
(파입업로드를 사용할 수 있도록 Class를 XML로 로드)
<beans:bean id="multipart" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
<beans:property name="defaultEncoding" value="utf-8"></beans:property>
(maxUploadSize : 최대 업로드 파일크기(-1 : 업로드 용량제한 없음))
<beans:property name="maxUploadSize" value="-1"></beans:property>
(파일 업로드하는 속도(업로드 데이터 용량 속도) )
<beans:property name="maxInMemorySize" value="2097152"></beans:property>
</beans:bean>

파일을 업로드 시킬때는 꼭 enctype="multipart/form-data" 를 넣어줘야지 form으로 보내짐

파일을 먼저 웹에 저장 후 DB에 저장한다 (파일 용량이 넘어가면 DB에만 저장되고 웹에는 저장되지않아 파일을 찾을수 없음)

{{{※※DB에 배열형태로 저장하고싶은데 String.join을 사용하면 []없이 as,as,as형태로 들어간다※※※}}}

1. commons-upload => pom.xml
2. webpage.xml => defaultEncoding(언어셋), maxUploadSize="-1"(용량 제한 해제),
 maxInMemorySize(서버에서 할당된 메모리까지만 사용가능함)-속도향샹:
 단점 메모리 과부하로 인하여 서버가 shutdown될수있음
3. Front-end: 파일첨부가 1개, 파일첨부가 여러개, 파일첨부 파트가 1개 있지만 여러개를 담을경우
4. Java Controller에서 @RequestParam("name명") MultipartFile 객체명
5. FileCopyUtils.copy() => 웹 디렉토리에 저장
6. commons-upload => localhost서버, CDN서버

============================================================================================================================================================================================================================================================================================================================================================================================================================================================
  [쿠폰]
  1. 쿠폰 종류 -%, 원
  2. 쿠폰 사용 제한 금액
  3. 쿠폰 제한 카테고리
  4. 쿠폰 유효기간
  5. 장바구니 전체, 각 상품 한해서만





================================================================================================================================================================================================================================================================================================


  create table gallery(
  gidx int(7) not null auto_increment,
  gwrite char(100) not null,
  gsubject varchar(200) not null,
  gtext text not null,
  goriㄹile text null,     //사용자가 업로드한 파일명
  gfile text null,        //저장시 랜덤함수를 이용하여 저장된 파일명
  gindate timestamp not null default current_timestamp,
  primary key(gidx)
  );



============================================================================================================================================================================================================================================================================================================================================================================================
[게시판]
  1. 모든 게시판에 대한 리스트,상세보기 => 무조건 GET
  2. 모든 게시판 글쓰기 => 무조건 POST



=======================================================================================================================================================================================================================================
[Ajax]

REST
  -API 작동 방식에 대한 조건을 부과하는 소프트웨어 ＊아키텍처입니다. 
  ＊목표하는 대상에 대하여 그 구성과 동작 원리, 구성 요소 간의 관계 및 시스템 
  외부 환경과의 관계 등을 설명하는 설계도 혹은 청사진을 말한다

  -네트워크상 (Server, Client) 사이의 통신 방식으로 구현하여 데이터를 주고 받는 하나의 소프트웨어(Method POST,GET,Delete,Put) 
  -비동기 통신 (파라미터 형태)
  -http://abc.co.kr/test.do?key=123&data=aaa;


RESTful
  -RESTful API는 두 컴퓨터 시스템이 인터넷을 통해 정보를 안전하게 교환하기 위해 사용하는 인터페이스입니다.
  -동기통신 (Method POST)
  -라우터 통신 (@GetMapping("/test.do/{id}"))
  -http://abc.co.kr/test.do/123



CDN
  -전 세계에 분산된 서버 네트워크를 통해 컨텐츠를 효율적으로 전송한다.

      아키텍처(데이터의 구조형태), 프로토콜(서버와 서버간의 통신)
      API 서버 
      -REST (GET,POST) - XML,JSON (아키텍처)
      -RESTful (GET,POST,PUT,DELETE) -> URI 파라미터
      -CDN (GET,POST) - Image,Video
      -SOAP - REST와 특성이 비슷함 (프로토콜) XML




[Ajax-ECMA]
{Fetch}
[POST,GET] - 내부 시스템(localhost)
  enctype = "application/application/x-www-from-urlenccoded"
  enctype = "application/json"
  enctype = "application/xml"

[POST,GET] - 외부 시스템(CORS)
  enctype = "application/application/x-www-from-urlenccoded" => Backend Allows
  enctype = ""
  enctype = ""

  post로 보낼때는 주로 @RequestBody로 받고
  get으로 보낼땐느 @RequestParam으로 받는다


  -Fetch에서 CORS 걸렸을때 Ajax랑 다르게 
  mode : "no-cors" 작성시 CORS 해제됨
-Ajax는 
  res.addHeader("Access-Control-Allow-Origin","*");
  res.addHeader("Access-Control-Allow-Credientials","true");
  이 두 코드를 넣던가
  @CrossOrigin("http:.//localhost:8080")
  이 코드를 넣으면 풀림
  위 두 코드는 같은 코드이므로 동시 사용 금지 


[CORS]
  http://www.baeldung.com/spring-cors
  사이트 들어가서 읽어보기

  -jquery 
  res.addHeader("Access-Control-Allow-Origin","*");
  res.addHeader("Access-Control-Allow-Credentials","true");

  @CrossOrigin(origins = "*",allowedHeaders = "*")

  둘중 하나를 Back-end에서 사용

  -ECMA 

  mode : "no cors",
  Front에서 모드로 걸어주면 Back-end가 따로 핸들링 할 필요 없음
  하지만 mode를 사용하면 CORS는 풀리지만 데이터값을 가져오진 못함
  똑같이 밑에 두 코드중 한가지를 사용해야만 값을 return 받을수 있음


  -javascript
  res.addHeader("Access-Control-Allow-Origin","*");
  res.addHeader("Access-Control-Allow-Credentials","true");

  @CrossOrigin(origins = "*",allowedHeaders = "*")





=======================================================================================================================================================================================================================================
[ECMA(ES5,6)]

  ECMA script => jquery 사용형태 + javascript 사용형태
  ES5 ~ ES6 (Internet Explorer) => ES7 ~ ES15


  import를 이용하여 외부 js파일을 로드 
  ES6  js 로드방법
  -<script type="module">
  import a from "./ecma3.js";
  </script> 

  작성 후 js 파일에서

  var dd = "테스트 ECMA Code";
  export default console.log(dd);
  
  import에서 요청한 사항을 export는 값을 내보냄


  ES에서 함수를 호출하는 방법
{JSP}

  {} 호출 받을 함수
  import {abc} from "./ecma3.js";
  abc("홍길동");

{JS}

  abc 함수를 import에서 호출 할 수 있도록 export로 설정
  export function abc(data){
    return console.log(data+"님 환영합니다."); 
  }



{form}

  -submit에 id를 안넣음
  -submit 사용시 function에 인자값을 필수로 입력 후 
  -preventDefault()를 이용하여 action이 작동 되지 않도록 설정함
  -return false가 안먹음
    document.querySelector("#frm").addEventListener("submit",function(z){
    z.preventDefault();
    new login().login_check();
  });

  //로그인 class
  export class login{
    //this로 선언된 가상변수는 static으로 적용된 사항과 같음
    constructor(){
      this.mid="hong";
    }
    login_check(){
      console.log(this.mid);	
    }
  }


========================================================================================================================================================================================================================
[GIT]

  git init => github 사이트의 있는 파일과 현재 IDE Project를 동기화 하는 디렉토리를 확인하는 작업

  [사용자추가] - local 사용하는 방식
  user.name : git에서 사용하는 사용자 이름
  user.email : Git에서 로그인하는 이메일 정보

  global user.name 또는 user.email : 전역형태의 방식으로 사용

  추가하는 방법
  git config user.name '이름'
  git config user.email 'git 사용 이메일'

  git config --global user.name 

[key]
  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
  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


[branch 설정]
  git에서 branch를 모두 설정 후 git bash에서 추가 셋팅을 하게 됩니다.

  git branch : branch리스트를 확인
  git branch 추가할 brnach명
  git checkout branch명 : default branch가 변경됨




====================================================================================================================================================================================================================================================================================================================================================================================================================================
[SERVER]

[OS-Linux]
 -RedHat(유료)
    -CentOS(무료)
    -Fedora(무료)
 -Ubuntu(임베디드) - 무료 (Git,Node.js)
 -Suse

[OS-window Server] - 유료
 -OS(라이센스),Mssql(라이센스)



[OS-IBM,HP,Unix]



[Net-Mask]
-네트위크의 주소를 32bit 형태로 구성하는 연결 연산 주소

일반적으로 
255.0.0.0 - A
255.255.0.0 - B
255.255.255.0 - C
255.255.255.255 - D

[NAT - 내부에서 사용하는 IP]
  - NAS




[운영체제 관련 정보]
  - /boot => booting
  -/usr => mysql,oracle,mariadb,ftp,ssh..각종 데몬을 설치 경로
  -/var => 메일 로그기록 각종 로그기록이 저장 되는 경로
  -/home => 웹 서비스를 제공하는 경로
  -/etc => 각종 데몬의 환경설정 (start,stop,status,conf 제공)
  -/swap => 처리메모리 영역
  -root => 리눅스 최고관리자 이며, 모든 프로세서를 관리하는 관리자
  -administrator => 윈도우서버 최고관리자

[(기본서버)CentOS]  
  -docker => 각 파티션으로 가상의 서버로 분활
  1. DB서버 - Mysql,MariaDB,Oracle
  2. WEB서버 - Apach,Nginx,Tomcat 
  3. CDN서버 - FTP (이미지 전용서버)


ip 10.0.2.15
서브넷 255.255.255.0
라우트 10.0.2.2
DNS 168.126.63.1   168.126.63.2


[Linux 명령어]
su : SuperUser(root) root로 전환 
ifconfig : 자신의 ip주소를 확인하는 명령어
nslookup : 외부서버에 연결이 가능한지 확인하는 명령어
pwd : 현재 디렉토리 경로
cd : change directory 약어로 경로를 변경할 때 사용
ls -al : 해당 경로에 파일 리스트를 확인 할때 사용하는 명령어
useradd '추가할 유저명' : 유저 추가하기
passwd '유저명' : 패스워드 설정
ntsysv : 데몬관리 프로그램
shift+; : vi에서 마무리하는 문법
selinux : 보안 포트를 방화벽과 연계해서 사용되는 데몬
[vi편집기로 편집을 해서 설정 ]
  i : 입력 
  ESC : 새로운 명령어 입력
  wq : write quick 저장하고 나가기 
  q! : 저장하지 않고 나가기


vi /etc/selinux/config => 들어가서 disabled로 변경해야됨

mkdir : 디렉토리 생성
wget : 외부 URL을 이용하여 파일 및 이미지, 동영상.. 서버에 직접 다운로드 받을 수 있습니다.
rm -drf: 파일,디렉토리 삭제
mv : 파일명 변경
yum update : 리눅스 전반적인 패키지를 모두 업데이트

vi text.txt 
-메모장 생성
cat text.txt
메모장 내용 확인

[sshd]
-외부에서 서버로 접속할 수 있는 프로토콜
-service sshd stop (외부접속 차단)
-service sshd start (외부접속 허용)
-service sshd restart (재가동)



[sshd-환경설정]
-22포트를 오픈시켜서 외부접속 허용
vi /etc/ssh/ssh_config
vi /etc/ssh/sshd_config
에서 포트번호를 #을 지움


[퍼미션]
r : 읽기(4)
w : 쓰기(2)
x : 실행(1)
rwx---rwx:707




create table admin(
  sidx int(7) unsigned not null auto_increment,
  sid  char(100) not null,
  spass text not null,
  sname char(50) not null,
  semail varchar(200) not null,
  shp char(11) not null,
  spart char(200) not null,
  master int(1) not null,
  sdate timestamp not null default current_timestamp,
  primary key(sidx),
  unique a(sid),
  unique b(semail),
  unique c(shp)
);


insert into admin (sidx,sid,spass,sname,spart,semail,shp,master,sdate) values('0','master','shop_master12','관리자','관리자/관리자','master@master','00000000000',1,now());


update admin set spass='000000000000001c0000000000000014000000000000002b000000000000002d000000000000000100000000000000aa000000000000003400000000000000e900000000000000a3000000000000006b00000000000000de00000000000000480000000000000006000000000000004500000000000000a5000000000000007f00000000000000d6000000000000009e00000000000000140000000000000015000000000000005d00000000000000ac00000000000000fa00000000000000b500000000000000a300000000000000f90000000000000025000000000000007b000000000000007700000000000000fd00000000000000c800000000000000d8' where sidx='7';


update admin set spass='000000000000001c0000000000000014000000000000002b000000000000002d000000000000000100000000000000aa000000000000003400000000000000e900000000000000a3000000000000006b00000000000000de00000000000000480000000000000006000000000000004500000000000000a5000000000000007f00000000000000d6000000000000009e00000000000000140000000000000015000000000000005d00000000000000ac00000000000000fa00000000000000b500000000000000a300000000000000f90000000000000025000000000000007b000000000000007700000000000000fd00000000000000c800000000000000d8
000000000000007c000000000000002d000000000000005a00000000000000d1000000000000008b000000000000009a0000000000000072000000000000009100000000000000b0000000000000001500000000000000a300000000000000fa0000000000000033000000000000007a000000000000009a000000000000000500000000000000820000000000000032000000000000009c00000000000000b2000000000000008c000000000000005c000000000000007f00000000000000340000000000000006000000000000004600000000000000db00000000000000ba0000000000000097000000000000000c000000000000004c00000000000000e9' where sidx='1';


update admin set spass='000000000000004f00000000000000c200000000000000b50000000000000067000000000000003a0000000000000020000000000000001a00000000000000d900000000000000b100000000000000fc000000000000000300000000000000dc00000000000000b3000000000000004600000000000000e100000000000000ba00000000000000ad00000000000000440000000000000035000000000000001d00000000000000aa0000000000000005000000000000000300000000000000d50000000000000053000000000000004b000000000000004d00000000000000fd00000000000000cc0000000000000043000000000000003200000000000000e0' where sidx='8';

http://mekeyace.dothome.co.kr/shop_info.pdf
http://mekeyace.dothome.co.kr/shop_source.zip


  alter table admin modify master int(1) null default '0';